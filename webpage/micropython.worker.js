import FileSystem from "./modules/FileSystem.mjs";

import LlvmBoxProcess from "./modules/LlvmBoxProcess.mjs";
import Python3Process from "./modules/Python3Process.mjs";
import MakeProcess from "./modules/MakeProcess.mjs";

class LLVM {
    initialised = false;

    constructor(){
        this.init();
    }

    fileSystem = null;
    tools = {};
    LLVMStdio;

    get(){
        if(self.buffer.length === 0) return null;
        const c = self.buffer.shift();
        return c;
    }

    async init() {
        postMessage({
            target: "worker",
            type: "info",
            body: "Populating File System",
        })

        const fileSystem = await new FileSystem();
        this.fileSystem = fileSystem;
        self.fileSystem = fileSystem;
        self.buffer = [];

        await fileSystem.unpack("./root.pack.br");

        await fileSystem.pull();

        const processConfig = {
            FS: fileSystem.FS
        };

        postMessage({
            target: "worker",
            type: "info",
            body: "Initialising Tools",
        })

        const tools = {
            "llvm-box": new LlvmBoxProcess({FS: fileSystem.FS, noFSInit: true}),
            "python": new Python3Process({FS: fileSystem.FS, onrunprocess: llvm.runHelper}),
            "pythonHelper": new Python3Process({FS: fileSystem.FS, onrunprocess: llvm.runHelper}),
            "make": new MakeProcess(processConfig),
        };
        self.tools = tools;

        for (let tool in tools) {
            await tools[tool];
        };

        postMessage({
            target: "worker",
            type: "info",
            body: "Ready",
        })
        

        self.tools["llvm-box"]._module.FS.init(llvm.get, undefined, undefined);

        //this.LLVMStdio = new LLVMStdio(self.tools["llvm-box"]._module);
        //console.log(await self.tools["llvm-box"].fileSystem.analyzePath("/src/codal_port"));
        
        // Faking microbitversion.h
        this.fileSystem.mkdir('/src/codal_port/build');
        this.fileSystem.mkdir('/src/codal_port/build/genhdr')
        await this.fileSystem.writeFile('src/codal_port/build/genhdr/mpversion.h', '// This file was generated by py/makeversionhdr.py\n#define MICROPY_GIT_TAG\n"v1.20.0-dirty"#define MICROPY_GIT_HASH\n"294baf52b-dirty"\n#define MICROPY_BUILD_DATE "2023-07-25"');
        await this.fileSystem.writeFile('src/codal_port/build/genhdr/microbitversion.h', '// This file was generated by py/makeversionhdr.py\n#define MICROBIT_GIT_TAG\n"v1.20.0"#define MICROBIT_GIT_HASH\n"294baf52b"\n#define MICROBIT_BUILD_DATE "2023-07-25"');
        
        // Using GNU Make, execute a dry-run, to later pipe all of these commands through llvm.run(),
        let dryrun = await llvm.run("make PYTHON=python --dry-run -s");

        // Turn into an array, delimited by \n
        dryrun = dryrun.stdout.split("\n");
        
        // First element isnt relevant to build.
        dryrun.shift()
        
        // TODO, this removes comments which are for some reason returned by the dryrun, maybe a flag changes this?
        dryrun = dryrun.filter(function (item) {
            return item.indexOf("#") !== 0;
        });

        // TODO, this removes any 'echo' command, may choose to rewrite this and instead display info to user 
        dryrun = dryrun.filter(function (item) {
            return item.indexOf("echo") !== 0;
        });

        // TODO, this removes any 'touch' command, dont have this avaliable in wasm
        dryrun = dryrun.filter(function (item) {
            return item.indexOf("touch") !== 0;
        });

        // Send each element in dry run for processing.
        for(let index in dryrun){
            console.log(llvm.runHelper(dryrun[index]));
        }

        console.log(await this.fileSystem.analyzePath("/src/codal_port"));
        this.initialised = true;
    };

    onprocessstart = () => {};
    onprocessend = () => {};
    onstdout = () => {};
    onstderr = () => {};

    runHelper(args){
        if(self.fileSystem.FS.analyzePath("/src/codal_port/stream")?.object?.contents){
            self.buffer = Array.from(self.fileSystem.FS.analyzePath("/src/codal_port/stream").object.contents);
        }

        if(args.includes("makeversionhdr.py") || args.includes("microbitversion.h.pre")){
            return "Git Commands breaking things, ignoring";
        }

        // Below is a hacky way to parse bash commands, it will be custom to the commands we are using. 
        // Maybe some wasm based things can be done to replace this? 
        let output = null;
        let lastOut = "";
        // This is used to tell users an error occured, and show some help, removing for now.
        if(args.includes(" || ")){ 
            args = args.split(" || "); 
            return llvm.run(args[0]);
        }
        // " | " each command reads the output of the previous. This is handled in python.
        // Also handles redirecting stdout.
        else if(args.includes(" | ") || args.includes(" > ")){
            args = "pythonHelper utils.py "+args;
            return llvm.run(args);
        }
        // Default case
        else return llvm.run(args);
    }

    run(args) {
        if((typeof args) === "string") args = args.split(/ +/g);
                
        switch (args[0]){
            case "arm-none-eabi-gcc" : args.shift(); args.unshift(...replaceGCC); break;
            case "arm-none-eabi-ar"  : args[0] = "llvm-ar"; break; 
        }

        let process = null;
        let cd = "";
        switch (args[0]){
            case "python": process = "python";   break;
            case "pythonHelper" : process = "pythonHelper"; args[0] = "python"; break;
            case "make"  : process = "make";     break;
            case "cp" : return;
            //case "cp"    : process = "pythonHelper" ; args = args.unshift("python", "utils.py"); break;
            case "(cd"   : cd = args[1];         break;  // TODO, Append to end of CWD, and still run nex command.
            case "mkdir" : console.log(args) ; llvm.fileSystem.mkdirTree("/src/codal_port/"+args[2]); return "Made"; // mkdir replacement.
            default      : process = "llvm-box"; break;  // TODO Avoid doing 5 different checks for this, should probably be error handling though
        }

        console.log(args);

        let p = self.tools[process].exec(args, {
            print: (...args) => (...args) => {},
            printErr: (...args) => (...args) => {},
            cwd: "/src/codal_port".concat(cd)
        })
        return p;
    };

    //Cannot get readFile() to work, not sure if its due to the encoding of MICROBIT.hex,
    //FileSystem only allows 'utf8' and 'binary'. This returns the byte array anyway.
    async getHex(){
        let arr = Array.from(await this.fileSystem.FS.analyzePath('/working/MICROBIT.hex').object.contents);
        while(arr[arr.length-1] === 0) arr.pop(); // Removing trailing Zeroes, Array is ~twice the size it needs to be
        return Uint8Array.from(arr);
    };

    async saveFiles(files) {
        for (let f in files) {
            this.saveFile(f, files[f]);
        }
    }

    async saveFile(name, contents){
        await this.fileSystem.writeFile('/working/'+name,contents);
    };
}

const replaceGCC = ['clang','--target=arm-none-eabi','-I/include','-I/include/arm-none-eabi-c++/c++/10.3.1',
'-I/include/arm-none-eabi-c++','-I/include/arm-none-eabi-c++/arm-none-eabi/thumb/v7e-m+fp/softfp','-I/include/arm-none-eabi-c++/c++/10.3.1/arm-none-eabi',
'-I/include/arm-none-eabi-c++/backward','-I/include/arm-none-eabi/include','-I/include/arm-none-eabi/include-fixed']

const includeConst = ['-I/include','-I/include/arm-none-eabi-c++/c++/10.3.1',
'-I/include/arm-none-eabi-c++','-I/include/arm-none-eabi-c++/arm-none-eabi/thumb/v7e-m+fp/softfp','-I/include/arm-none-eabi-c++/c++/10.3.1/arm-none-eabi',
'-I/include/arm-none-eabi-c++/backward','-I/include/arm-none-eabi/include','-I/include/arm-none-eabi/include-fixed',
'-I/libraries','-I/source/samples','-I/libraries/codal-microbit-v2/inc','-I/libraries/codal-microbit-v2/inc/bluetooth',
'-I/libraries/codal-microbit-v2/inc/compat','-I/libraries/codal-microbit-v2/model','-I/libraries/codal-nrf52/inc',
'-I/libraries/codal-nrf52/inc/cmsis','-I/libraries/codal-nrf52/nrfx/mdk','-I/libraries/codal-nrf52/nrfx',
'-I/libraries/codal-nrf52/nrfx/templates','-I/libraries/codal-nrf52/nrfx/templates/nRF52833',
'-I/libraries/codal-nrf52/nrfx/drivers/include','-I/libraries/codal-nrf52/nrfx/drivers/src',
'-I/libraries/codal-core/./inc/core','-I/libraries/codal-core/./inc/driver-models','-I/libraries/codal-core/./inc/drivers',
'-I/libraries/codal-core/./inc/streams','-I/libraries/codal-core/./inc/types',
'-I/libraries/codal-microbit-nrf5sdk/../codal-nrf52/nrfx/hal','-I/libraries/codal-microbit-nrf5sdk/sdk_config',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK_mods','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/pwr_mgmt',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/sortlist','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/strerror',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/softdevice/common','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/crc32',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/bootloader/dfu','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/util',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/ble/common','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/balloc',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/ble/peer_manager','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/ringbuf',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/timer','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/log',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/ble/nrf_ble_gatt','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/bootloader',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/fstorage','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/experimental_section_vars',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/softdevice/s113/headers','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/mutex',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/delay','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/bootloader/ble_dfu',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/atomic_fifo','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/atomic',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/memobj','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/fds',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/atomic_flags','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/softdevice/s113/headers/nrf52',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/ble/ble_services/ble_dfu','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/external/fprintf',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/svc','-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/libraries/log/src',
'-I/libraries/codal-microbit-nrf5sdk/nRF5SDK/components/ble/ble_services/ble_dis']


async function buildMicropython(fileArray) {
    //Compilation step using clang.wasm module. Mostly copied from microbit-v2-samples final compilation step with some extra flags to supress clang warnings.  
    let fileName;
    let filesToLink = [];
    let allFiles = [];

    for(let f in fileArray) {
        fileName = fileArray[f];
        allFiles.push(fileName);
        if(fileName.includes(".cpp")){
            let clangOutput = await llvm.run('clang++','-include-pch','../include/MicroBit.h.pch','--target=arm-none-eabi','-DMICROBIT_EXPORTS',...includeConst,'-Wno-expansion-to-defined','-mcpu=cortex-m4','-mthumb','-mfpu=fpv4-sp-d16',
            '-mfloat-abi=softfp','-fno-exceptions','-fno-unwind-tables','-ffunction-sections','-fdata-sections','-Wall','-Wextra','-Wno-unused-parameter','-std=c++11',
            '-fwrapv','-fno-rtti','-fno-threadsafe-statics','-fno-exceptions','-fno-unwind-tables','-Wno-array-bounds','-include', '/include/codal_extra_definitions.h',
            '-Wno-inconsistent-missing-override','-Wno-unknown-attributes','-Wno-uninitialized','-Wno-unused-private-field','-Wno-overloaded-virtual','-Wno-mismatched-tags','-Wno-deprecated-register',
            '-I"/include"','-O2','-g','-DNDEBUG','-DAPP_TIMER_V2','-DAPP_TIMER_V2_RTC1_ENABLED','-DNRF_DFU_TRANSPORT_BLE=1','-DNRF52833_XXAA','-DNRF52833','-DTARGET_MCU_NRF52833',
            '-DNRF5','-DNRF52833','-D__CORTEX_M4','-DS113','-DTOOLCHAIN_GCC', '-D__START=target_start','-MMD','-MT',fileName+'.obj','-MF','DEPFILE',
            '-o',fileName+'.obj','-c', fileName);

            postMessage({
                target: "compile",
                type: "output",
                source: "clang",
                body: clangOutput,
            })

            if(isError(clangOutput.stderr)){
                postMessage({
                    target: "compile",
                    type: "stderr",
                    source: "clang",
                    body: clangOutput.stderr,
                });

                return false;
            }
            filesToLink.push(fileName+".obj");
        }
    }
  
    //Linking to create MICROBIT executable using lld.wasm module. Copied from microbit-v2-samples final linking step. 
    let linkOutput = await llvm.run('ld.lld','-plugin','/libraries/arm-none-eabi/liblto_plugin.so','-plugin-opt=/libraries/arm-none-eabi/lto-wrapper', '-plugin-opt=-fresolution=/tmp/ccJn9KUK.res',
    '-plugin-opt=-pass-through=-lgcc','-plugin-opt=-pass-through=-lc_nano','-plugin-opt=-pass-through=-lgcc','-plugin-opt=-pass-through=-lc_nano',
    '-X','-o','MICROBIT','/libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crti.o','/libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crtbegin.o',
    '/libraries/arm-none-eabi-newlib/thumb/v7e-m+fp/softfp/crt0.o','-L/libraries/arm-none-eabi/thumb/v7e-m+fp/softfp',
    '-L/libraries/arm-none-eabi-newlib/thumb/v7e-m+fp/softfp','-L/libraries/arm-none-eabi','-L/libraries/arm-none-eabi-newlib','--gc-sections',
    '--sort-common','--sort-section=alignment','--gc-sections','--wrap', 'atexit','--start-group','-lstdc++_nano','-lsupc++_nano','-lgcc','-lnosys','--end-group',
    '-Map','MICROBIT.map','--start-group',...filesToLink,'/libs/libcodal-microbit-v2.a','/libs/libcodal-core.a','/libs/libcodal-nrf52.a',
    '/libs/libcodal-microbit-nrf5sdk.a','/libs/libcodal-nrf52.a','/libs/libcodal-core.a','/libraries/codal-microbit-v2/lib/bootloader.o',
    '/libraries/codal-microbit-v2/lib/mbr.o','/libraries/codal-microbit-v2/lib/settings.o', '/libraries/codal-microbit-v2/lib/softdevice.o',
    '/libraries/codal-microbit-v2/lib/uicr.o','-lnosys','-lstdc++_nano','-lsupc++_nano','-lm','-lc_nano','-lgcc','-lstdc++_nano','-lsupc++_nano',
    '-lm','-lc_nano','-lgcc','--end-group','-lstdc++_nano','-lm','-lc_nano','--start-group','-lgcc','-lc_nano','--end-group',
    '--start-group','-lgcc','-lc_nano','--end-group','/libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crtend.o','/libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crtn.o',
    '-T','/libraries/codal-microbit-v2/ld/nrf52833-softdevice.ld');

    postMessage({
        target: "compile",
        type: "output",
        source: "linker",
        body: linkOutput,
    })

    if (isError(linkOutput.stderr)) { 
        postMessage({
            target: "compile",
            type: "stderr",
            source: "linker",
            body: linkOutput.stderr,
        });
        
        return false;
    }

    //Converting MICROBIT executable to hex file. Using llvm-objcopy.wasm module.
    let objOutput = await llvm.run('llvm-objcopy', '-O', 'ihex', 'MICROBIT', 'MICROBIT.hex');
 
    postMessage({
        target: "compile",
        type: "output",
        source: "objcopy",
        body: objOutput,
    })

    return true;
}

//Checks if stderr is an error and not a warning
function isError(stderr) {
    return stderr.includes("error:");
}

async function clean() {
    let workingDir = await llvm.fileSystem.FS.analyzePath('/working/');
    let filesToRemove = workingDir.object.contents;

    for(let f in filesToRemove) {
        await llvm.fileSystem.unlink(`/working/${f}`);
    }
}

onmessage = async(e) => {
    const msg = e.data;
    
    switch (msg.type) {
        case "buildMicropython": handleBuildRequest(msg.body); break;
        default: 
            postMessage({
                target: "worker",
                type: "error",
                body: `Unhandled request message type '${msg.type}' received.\nFull message:\n${msg}`,
            })
            break;
            
    }
}

async function handleBuildRequest(files) {
    if (!llvm.initialised) {
        postMessage({
            target: "worker",
            type: "error",
            body: "Cannot compile yet, worker is not yet initialised"
        })
        return;
    }

    llvm.saveFiles(files);
        
    let success = await compileCode(Object.keys(files))
    
    if (success) {
        const hex = await llvm.getHex();
        postMessage({
            target: "compile",
            type: "hex",
            body: hex,
        });
    } else {
        postMessage({
            target: "compile",
            type: "error",
            body: "Compilation failed",
        })
    }

    postMessage({
        target: "compile",
        type: "compile-complete",
    })

    await clean();
}

const llvm = new LLVM();