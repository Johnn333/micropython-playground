import FileSystem from "./modules/FileSystem.mjs";

import LlvmBoxProcess from "./modules/LlvmBoxProcess.mjs";
import Python3Process from "./modules/Python3Process.mjs";
import MakeProcess from "./modules/MakeProcess.mjs";
import MpyCrossProcess from "./modules/MpyCrossProcess.mjs";
import StdIn from "./stdin.mjs";

class LLVM {
    initialised = false;

    constructor(){
        this.init();
    }

    fileSystem = null;
    tools = {};
    LLVMStdio;

    async init() {
        // Store the FileSystem in the GlobalWorkerSpace, this is useful
        // for when Wasm modules invoke other Wasm modules.
        const fileSystem = await new FileSystem();
        self.fileSystem = fileSystem;
        self.buffer = [];

        // Populate FS and sync.
        await fileSystem.unpack("./root.pack.br");
        await fileSystem.pull();

        // Create WebAssembly modules, using Emscripten generated files.
        // Wait for instantiation to complete. Store in GlobalWorkerSpace.
        const tools = {
            "llvm-box": new LlvmBoxProcess({FS: fileSystem.FS, noFSInit: true}),
            "python": new Python3Process({FS: fileSystem.FS, onrunprocess: llvm.runHelper}),
            "pythonH": new Python3Process({FS: fileSystem.FS, onrunprocess: llvm.runHelper}),
            "make": new MakeProcess({FS: fileSystem.FS}),
            "mpy-cross": new MpyCrossProcess({FS: fileSystem.FS}),
        };
        for (let tool in tools) {
            await tools[tool];
        };
        self.tools = tools;

        // Overwrite normal stdin functionality for "llvm-box" wasm
        let stdin = new StdIn();
        self.tools["llvm-box"]._module.FS.init(stdin.get, undefined, undefined);

        // Faking microbitversion.h, and mpversion.h. GIT is invoked to generate these which we don't have. 
        // TODO sync this upto real time, maybe try and get git version automatically too
        fileSystem.mkdirTree('/src/codal_port/build/genhdr')
        await fileSystem.writeFile('src/codal_port/build/genhdr/mpversion.h', 
                                        '// This file was generated by py/makeversionhdr.py\n'+
                                        '#define MICROPY_GIT_TAG "v1.20.0-dirty"\n'+
                                        '#define MICROPY_GIT_HASH "294baf52b-dirty"\n'+
                                        '#define MICROPY_BUILD_DATE "2023-07-25"');

        await fileSystem.writeFile('src/codal_port/build/genhdr/microbitversion.h',
                                        '// This file was generated by py/makeversionhdr.py\n'+
                                        '#define MICROBIT_GIT_TAG "v1.20.0"\n'+
                                        '#define MICROBIT_GIT_HASH "294baf52b"\n'+
                                        '#define MICROBIT_BUILD_DATE "2023-07-25"');
        this.initialised = true;

        self.postMessage("Ready");
        
        self.postMessage({
            origin: "pyfile",
            body: String.fromCharCode(...fileSystem.readFile("/src/codal_port/manifest.py"))
        })

        self.postMessage({
            origin: "cfile",
            body: String.fromCharCode(...fileSystem.readFile("/src/codal_port/Makefile"))
        })
    };

    runHelper(args){
        // This is for the current Stdin implementation which may change. Some commands to build micropython use the
        // pipeline operator " | ". If this is the case we need the stdout of the previous command to be the stdin of the next. 
        // Store the stdout, from the python generated file "stream", in a buffer to read in the future. 
        if(self.fileSystem.FS.analyzePath("/src/codal_port/stream")?.object?.contents){
            self.buffer = Array.from(self.fileSystem.FS.analyzePath("/src/codal_port/stream").object.contents);
        }

        // To save us having a custom MakeFile which doesn't build any of this.
        if(args.includes("makeversionhdr.py") || args.includes("microbitversion.h.pre") || args.includes("test")){
            return "Git Commands breaking things, ignoring";
        }

        // Below is a hacky way to parse bash commands, it will be custom to the commands we are using. 
        // Maybe some wasm based things can be done to replace this? 
        
        // This is used to tell users an error occured, and show some help, removing for now.
        if(args.includes(" || ")){ 
            args = args.split(" || "); 
            return llvm.run(args[0]);
        }
        // " | " each command reads the output of the previous. This is handled in python.
        // Also handles redirecting stdout.
        else if(args.includes(" | ") || args.includes(" > ")){
            args = "pythonH utils.py "+args;
            return llvm.run(args);
        }
        // Quotation marks are breaking things here for whatever reason. As we know that all the 
        // directories contain no spaces this seems sensible to change.
        if(args.includes("makemanifest.py")) args = args.replaceAll('"','')
        // Default case
        return llvm.run(args);
    }

    run(args) {
        if((typeof args) === "string") args = args.split(/ +/g);
        
        // Again, to save changing the makefiles, we can just parse the command here. Giving a suitable LLVM
        // replacement command to GCC
        switch (args[0]){
            case "arm-none-eabi-as"  : args.shift(); args.unshift("clang", "--target=thumbv7m-none-eabi", "-c"); break;
            //case "arm-none-eabi-as"  : args = 'clang -cc1as -triple thumbv7m-none-unknown-eabi -filetype obj -main-file-name gchelper_thumb2.s -target-cpu cortex-m3 -target-feature +strict-align -fdebug-compilation-dir /src/codal_port -dwarf-debug-producer -dwarf-version=4 -mrelocation-model static -mllvm -arm-add-build-attributes -o build/shared/runtime/gchelper_thumb2.o ../../lib/micropython/shared/runtime/gchelper_thumb2.s'.split(/ +/g); break;
            case "arm-none-eabi-gcc" : args.shift(); args.unshift(...replaceGCC); break;
            case "arm-none-eabi-ar"  : args[0] = "llvm-ar"; break; 
        }

        let process = null;
        let cd = "";
        switch (args[0]){
            case ""        : process = "pythonH"; args[0] = "python"; break; // TODO, figure out why mpy-tool.py script has nothing for arg[0].
            case "make"    : process = "make";     break;
            case "/lib/micropython/mpy-cross/build/mpy-cross"    : process = "mpy-cross";     break;
            case "python"  : process = "python";   break;
            case "pythonH" : process = "pythonH";  args[0] = "python"; break; // Python Helper, so Python can invkoke python.
            case "cp"      : return;                       // Ignoring CP for now, not required.
            case "mkdir"   : return this.makeDir(args);    // mkdir replacement.
            default        : process = "llvm-box"; break;  // TODO Avoid doing 5 different checks for this, should probably be error handling though
        }

        console.log(args.join());

        let p = self.tools[process].exec(args, {
            print: () => () => {},
            printErr: () => () => {},
            cwd: "/src/codal_port".concat(cd)
        })

        console.log(p);

        return p;
    };

    //Cannot get readFile() to work, not sure if its due to the encoding of MICROBIT.hex,
    //FileSystem only allows 'utf8' and 'binary'. This returns the byte array anyway.
    async getHex(){
        let arr = Array.from(await self.fileSystem.FS.analyzePath('/src/codal_port/MICROBIT.hex').object.contents);
        while(arr[arr.length-1] === 0) arr.pop(); // Removing trailing Zeroes, Array is ~twice the size it needs to be
        return Uint8Array.from(arr);
    };

    async saveFiles(files) {
        for (let f in files) {
            this.saveFile(f, files[f]);
        }
    }

    async saveFile(name, contents){
        await self.fileSystem.writeFile('/working/'+name,contents);
    };

    makeDir(args){
        let dirToMake = "/src/codal_port/"+args[2];
        self.fileSystem.mkdirTree(dirToMake);
        return "mkdir"+dirToMake;
    }
}

const replaceGCC = ['clang','--target=arm-none-eabi','-I/include','-I/include/arm-none-eabi-c++/c++/10.3.1',
'-I/include/arm-none-eabi-c++','-I/include/arm-none-eabi-c++/arm-none-eabi/thumb/v7e-m+fp/softfp','-I/include/arm-none-eabi-c++/c++/10.3.1/arm-none-eabi',
'-I/include/arm-none-eabi-c++/backward','-I/include/arm-none-eabi/include','-I/include/arm-none-eabi/include-fixed']

function buildMicropython() {
    postMessage("Running Make");

    // Using GNU Make, execute a dry-run, to later pipe all of these commands through llvm.run(),
    let dryrun = llvm.run("make PYTHON=python --dry-run -s");

    // Turn into an array, delimited by \n
    dryrun = dryrun.stdout.split("\n");
    
    // First element isnt relevant to build.
    dryrun.shift()
    
    // TODO, this removes comments which are for some reason returned by the dryrun, maybe a flag changes this?
    dryrun = dryrun.filter(function (item) {
        return item.indexOf("#") !== 0;
    });

    // TODO, this removes any 'touch' command, dont have this avaliable in wasm
    dryrun = dryrun.filter(function (item) {
        return item.indexOf("touch") !== 0;
    });

    // Send each element in dry run for processing.
    for(let index in dryrun){
        if(dryrun[index].includes("GEN") ||
            dryrun[index].includes("CC") || 
            dryrun[index].includes("AS")) postMessage(dryrun[index].replace("echo ", ""));
        else{ 
            let out = llvm.runHelper(dryrun[index]);
            if(out?.stdout) postMessage(out.stdout);
        }
    }

    // Look into making this smaller, possibly building arm-llvm but this is a future goal
    let e = llvm.run("ld.lld -plugin /libraries/arm-none-eabi/liblto_plugin.so -plugin-opt=/libraries/arm-none-eabi/lto-wrapper -plugin-opt=-fresolution=/tmp/ccljymuZ.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc_nano -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc_nano -X -o MICROBIT /libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crti.o /libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crtbegin.o /libraries/arm-none-eabi-newlib/thumb/v7e-m+fp/softfp/crt0.o -L/libraries/arm-none-eabi-newlib/thumb/v7e-m+fp/softfp -L/libraries/arm-none-eabi-newlib/thumb/v7e-m+fp/softfp -L/libraries/arm-none-eabi/thumb/v7e-m+fp/softfp --gc-sections --wrap atexit --start-group -lstdc++_nano -lsupc++_nano -lgcc -lnosys --end-group ../../lib/codal/../../src/codal_port/filesystem.ld -Map ../../lib/codal/build/MICROBIT.map --start-group ../build/CMakeFiles/MICROBIT.dir/home/johnn333/Documents/micro/micropython-microbit-v2/src/codal_app/main.cpp.o ../build/CMakeFiles/MICROBIT.dir/home/johnn333/Documents/micro/micropython-microbit-v2/src/codal_app/microbithal.cpp.o ../build/CMakeFiles/MICROBIT.dir/home/johnn333/Documents/micro/micropython-microbit-v2/src/codal_app/microbithal_audio.cpp.o ../build/CMakeFiles/MICROBIT.dir/home/johnn333/Documents/micro/micropython-microbit-v2/src/codal_app/microbithal_microphone.cpp.o ../build/CMakeFiles/MICROBIT.dir/home/johnn333/Documents/micro/micropython-microbit-v2/src/codal_app/mphalport.cpp.o ../../lib/codal/build/libcodal-microbit-v2.a ../../lib/codal/build/libcodal-core.a ../../lib/codal/build/libcodal-nrf52.a ../../lib/codal/build/libcodal-microbit-nrf5sdk.a ../../lib/codal/../../src/codal_port/build/libmicropython.a ../../lib/codal/build/libcodal-nrf52.a ../../lib/codal/build/libcodal-core.a ../../lib/codal/libraries/codal-microbit-v2/lib/bootloader.o ../../lib/codal/libraries/codal-microbit-v2/lib/mbr.o ../../lib/codal/libraries/codal-microbit-v2/lib/settings.o ../../lib/codal/libraries/codal-microbit-v2/lib/softdevice.o ../../lib/codal/libraries/codal-microbit-v2/lib/uicr.o -lnosys -lstdc++_nano -lsupc++_nano -lm -lc_nano -lgcc -lstdc++_nano -lsupc++_nano -lm -lc_nano -lgcc --end-group -lstdc++_nano -lm -lc_nano --start-group -lgcc -lc_nano --end-group --start-group -lgcc -lc_nano --end-group /libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crtend.o /libraries/arm-none-eabi/thumb/v7e-m+fp/softfp/crtn.o -T ../../lib/codal/libraries/codal-microbit-v2/ld/nrf52833-softdevice.ld");
    console.log(e);
    llvm.run("llvm-objcopy -O ihex MICROBIT MICROBIT.hex");

    // Permission errors are being generated here, TODO
    //console.log(llvm.run("python ../addlayouttable.py /src/codal_port/microbit.hex ../../lib/codal/build/MICROBIT.map -o MICROBIT.hex"));
    postMessage("Finished :)");
    return true;
}


onmessage = async(e) => {
    if(!llvm.initialised) postMessage("Loading, please wait");
    else{
        buildMicropython();
        postMessage({origin: "hex", body: await llvm.getHex()});
    }
}

const llvm = new LLVM();